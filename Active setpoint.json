[{"id":"98c4593774056b3c","type":"function","z":"a5ecbc5e135cb5e8","g":"9ab8aada22885506","name":"Active setpoint -2500 w (charge batt) 40149","func":"// Define the Modbus function code and register number\nvar fc = 16; // Function code for Write Multiple Registers\nvar sa = 40149; // Starting register number for \"active power setpoint\"\n\n// Define the setpoint value (-2500)\nvar setpointValue = -2500;\n\n// Convert the setpoint value to a 32-bit signed integer\nvar intValue = Math.round(setpointValue); // Round the value to the nearest integer\nvar buf = Buffer.alloc(4); // Use 4 bytes for a 32-bit signed integer\nbuf.writeInt32BE(intValue);\n\n// Create the Modbus message object\nvar message = {\n    payload: {\n        value: buf,\n        'fc': fc,\n        'unitid': 1, // Modify if needed\n        'address': sa,\n        'quantity': 4, // Number of registers to write (adjust to match the length of the payload array)\n        'datatype': 'S32', // Set the data type to S32\n        'format': 'FIX0', // Set the data format to FIX0\n        'access': 'WO', // Set the access to WO (Write Only)\n        'name': 'active power setpoint' // Set the name to match the SMA Speedwire name\n    }\n};\n\n// Send the message to the output\nreturn message;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":320,"wires":[["c66c43faf6131e61"]]},{"id":"9f61459623721bfb","type":"function","z":"a5ecbc5e135cb5e8","g":"9ab8aada22885506","name":"Active setpoint 5000 w (Discharge batt) 40149","func":"// Define the Modbus function code and register number\nvar fc = 16; // Function code for Write Multiple Registers\nvar sa = 40149; // Starting register number for \"active power setpoint\"\n\n// Define the setpoint value \nvar setpointValue = 5000;\n\n// Convert the setpoint value to a 32-bit signed integer\nvar intValue = Math.round(setpointValue); // Round the value to the nearest integer\nvar buf = Buffer.alloc(4); // Use 4 bytes for a 32-bit signed integer\nbuf.writeInt32BE(intValue);\n\n// Create the Modbus message object\nvar message = {\n    payload: {\n        value: buf,\n        'fc': fc,\n        'unitid': 1, // Modify if needed\n        'address': sa,\n        'quantity': 4, // Number of registers to write (adjust to match the length of the payload array)\n        'datatype': 'S32', // Set the data type to S32\n        'format': 'FIX0', // Set the data format to FIX0\n        'access': 'WO', // Set the access to WO (Write Only)\n        'name': 'active power setpoint' // Set the name to match the SMA Speedwire name\n    }\n};\n\n// Send the message to the output\nreturn message;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":440,"y":480,"wires":[["c66c43faf6131e61"]]},{"id":"0c9fe998583add62","type":"inject","z":"a5ecbc5e135cb5e8","g":"9ab8aada22885506","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":160,"y":320,"wires":[["98c4593774056b3c"]]},{"id":"e08abb00f06d1ae7","type":"inject","z":"a5ecbc5e135cb5e8","g":"9ab8aada22885506","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":160,"y":480,"wires":[["9f61459623721bfb"]]},{"id":"8b1e0e056c350b4b","type":"function","z":"a5ecbc5e135cb5e8","g":"9ab8aada22885506","name":"Active setpoint 0 w (Balance) 40149","func":"// Define the Modbus function code and register number\nvar fc = 16; // Function code for Write Multiple Registers\nvar sa = 40149; // Starting register number for \"active power setpoint\"\n\n// Define the setpoint value (0)\nvar setpointValue = 0;\n\n// Convert the setpoint value to a 32-bit signed integer\nvar intValue = Math.round(setpointValue); // Round the value to the nearest integer\nvar buf = Buffer.alloc(4); // Use 4 bytes for a 32-bit signed integer\nbuf.writeInt32BE(intValue);\n\n// Create the Modbus message object\nvar message = {\n    payload: {\n        value: buf,\n        'fc': fc,\n        'unitid': 1, // Modify if needed\n        'address': sa,\n        'quantity': 4, // Number of registers to write (adjust to match the length of the payload array)\n        'datatype': 'S32', // Set the data type to S32\n        'format': 'FIX0', // Set the data format to FIX0\n        'access': 'WO', // Set the access to WO (Write Only)\n        'name': 'active power setpoint' // Set the name to match the SMA Speedwire name\n    }\n};\n\n// Send the message to the output\nreturn message;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":400,"wires":[["c66c43faf6131e61"]]},{"id":"ebd12261d6277a8d","type":"inject","z":"a5ecbc5e135cb5e8","g":"9ab8aada22885506","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":160,"y":400,"wires":[["8b1e0e056c350b4b"]]},{"id":"3ba37fa42414eb14","type":"function","z":"a5ecbc5e135cb5e8","g":"9ab8aada22885506","name":"Take control of the inverter","func":"// Stel de gewenste waarde in voor de modus van de vermogensregeling via communicatie\nvar desiredMode = [0, 802]; // Active\n\n// Vorm het bericht voor het schrijven naar Modbus\nvar message = {\n    payload: {\n        value: desiredMode,\n        unitid: 1,\n        fc: 16, // Functiecode 16 voor het schrijven van meerdere registers\n        address: 40151,\n        quantity: 2 // Aantal registers om te schrijven\n    }\n};\n\n// Stuur het bericht naar de uitgang van de functie node\nreturn message;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":160,"wires":[["c66c43faf6131e61"]]},{"id":"ce4f7e1dfa6a26fa","type":"function","z":"a5ecbc5e135cb5e8","g":"9ab8aada22885506","name":"Release control back to the inverter","func":"// Stel de gewenste waarde in voor de modus van de vermogensregeling via communicatie\nvar desiredMode = [0, 803]; // Inactive\n\n// Vorm het bericht voor het schrijven naar Modbus\nvar message = {\n    payload: {\n        value: desiredMode,\n        unitid: 1,\n        fc: 16, // Functiecode 16 voor het schrijven van meerdere registers\n        address: 40151,\n        quantity: 2 // Aantal registers om te schrijven\n    }\n};\n\n// Stuur het bericht naar de uitgang van de functie node\nreturn message;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":240,"wires":[["c66c43faf6131e61"]]},{"id":"ee1c666f2570c6ed","type":"inject","z":"a5ecbc5e135cb5e8","g":"9ab8aada22885506","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":160,"y":160,"wires":[["3ba37fa42414eb14"]]},{"id":"83cbe65b602d5115","type":"inject","z":"a5ecbc5e135cb5e8","g":"9ab8aada22885506","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":160,"y":240,"wires":[["ce4f7e1dfa6a26fa"]]},{"id":"c66c43faf6131e61","type":"modbus-flex-write","z":"a5ecbc5e135cb5e8","g":"9ab8aada22885506","name":"Modbus write node","showStatusActivities":true,"showErrors":true,"showWarnings":true,"server":"a3ba30e733e52b3b","emptyMsgOnFail":true,"keepMsgProperties":true,"delayOnStart":true,"startDelayTime":"1","x":870,"y":320,"wires":[[],[]]},{"id":"a3ba30e733e52b3b","type":"modbus-client","name":"","clienttype":"tcp","bufferCommands":true,"stateLogEnabled":true,"queueLogEnabled":true,"failureLogEnabled":true,"tcpHost":"192.168.178.72","tcpPort":"502","tcpType":"DEFAULT","serialPort":"/dev/ttyUSB","serialType":"RTU-BUFFERD","serialBaudrate":"9600","serialDatabits":"8","serialStopbits":"1","serialParity":"none","serialConnectionDelay":"100","serialAsciiResponseStartDelimiter":"0x3A","unit_id":3,"commandDelay":1,"clientTimeout":1000,"reconnectOnTimeout":true,"reconnectTimeout":2000,"parallelUnitIdsAllowed":true,"showErrors":true,"showWarnings":true,"showLogs":true}]